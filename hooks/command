#!/bin/bash
set -eu -o pipefail

fail() {
  echo "ERROR: ${*}" 1>&2
  exit 1
}

# checks if a corresponding buildkite variable is set,
# and then if the shell is new enough to support that
# particular shopt.
set_shopt() {
  local option="${1}"
  local varname
  varname="$(tr '[:lower:]' '[:upper:]' <<< "BUILDKITE_PLUGIN_SHELLCHECK_${option}")"

  if [[ ${!varname:-false} == true ]]; then
    bash_version_check "${option}"
    shopt -s "${option}"
  fi
}

bash_version_check() {
  local option="${1}"
  local required

  case "${option}" in
    globstar) required="4" ;;
    extglob) required="3" ;;
    *)  fail "attempted to set unknown shopt '${option}'" ;;
  esac

  if [[ ${BASH_VERSINFO[0]} -lt ${required} ]]; then
    fail "shopt '${option}' requires Bash ${required} or newer"
  fi
}

# Reads either a value or a list from plugin config
plugin_read_list() {
  local prefix="BUILDKITE_PLUGIN_SHELLCHECK_$1"
  local parameter="${prefix}_0"

  if [[ -n ${!parameter:-} ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n ${!parameter:-} ]]; do
      echo "${!parameter}"
      i=$((i + 1))
      parameter="${prefix}_${i}"
    done
  elif [[ -n ${!prefix:-} ]]; then
    echo "${!prefix}"
  fi
}

set_shopt globstar
set_shopt extglob

IFS=$'\n\t'
files=()

# Evaluate all the globs and return the files that exist
for file in $(plugin_read_list FILES); do
  if [[ -e $file ]]; then
    files+=("$file")
  fi
done

if [[ -z ${files:-} ]]; then
  echo "No files found to shellcheck"
  exit 1
fi

# Read in the options to pass to shellcheck.  Ask for color by default
# for pretty online log display (but someone can override this with an
# explicit `options: "--color=never"`)
options=("--color=always")
while IFS=$'\n' read -r option; do
  options+=("$option")
done < <(plugin_read_list OPTIONS)

BUILDKITE_PLUGIN_SHELLCHECK_VERSION="${BUILDKITE_PLUGIN_SHELLCHECK_VERSION:-stable}"

echo "+++ Running shellcheck on ${#files[@]} files"
if docker run --rm -v "$PWD:/mnt" --workdir "/mnt" "koalaman/shellcheck:$BUILDKITE_PLUGIN_SHELLCHECK_VERSION" "${options[@]+${options[@]}}" "${files[@]}"; then
  echo "Files are ok âœ…"
else
  exit 1
fi
