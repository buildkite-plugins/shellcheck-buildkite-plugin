#!/bin/bash
set -eu -o pipefail

fail() {
  echo "ERROR: ${*}" 1>&2
  exit 1
}

# checks if a buildkite variable corresponding to a given shopt is set,
# and then attempts to set it. Errors will be caught and pushed up through
# error logging along with a note about the required Bash version number.
set_shopt() {
  local option="${1}"

  # `tr` is used instead of Bash 4's ^^ (uppercase) and ,, (lowercase)
  # because evaluating which version of Bash the agent is running only
  # happens when setting `shopt` values; it leads to clunkier, more
  # verbose assignments but it should ensure wider compatability in situations
  # where no `shopt` values need to be set at all.
  local varname
  varname="$(tr '[:lower:]' '[:upper:]' <<< "BUILDKITE_PLUGIN_SHELLCHECK_${option}")"
  local value
  value="$(tr '[:upper:]' '[:lower:]' <<< "${!varname:-false}")"

  # return immediately (and successfully) unless the value is explicitly set to true
  [[ ${value} =~ ^(true|1)$ ]] || return 0

  # macOS is the last major platform still using Bash 3, and `shopt -q` is
  # broken on macOS. So we have to mute `shopt` the old-fashioned way
  # and redirect output to /dev/null. Since the list of options's we'll attempt
  # to set is so constrained, we can use a small helper fuction to look up
  # which version of bash introduced a given the shopts in our error handling.
  if ! shopt -s "${option}" &> /dev/null; then
    fail "failed to set shopt '${option}: $(bash_version_lookup "${option}")"
  fi
}

# look up which version of bash introduced
# a given shopt and print it to stdout.
bash_version_lookup() {
  local option="${1}"
  local required

  case "${option}" in
    globstar) required="4" ;;
    extglob) required="2" ;;
  esac

  echo "shopt '${option}' requires Bash ${required} or newer"
}

# Reads either a value or a list from plugin config
plugin_read_list() {
  local prefix="BUILDKITE_PLUGIN_SHELLCHECK_$1"
  local parameter="${prefix}_0"

  if [[ -n ${!parameter:-} ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n ${!parameter:-} ]]; do
      echo "${!parameter}"
      i=$((i + 1))
      parameter="${prefix}_${i}"
    done
  elif [[ -n ${!prefix:-} ]]; then
    echo "${!prefix}"
  fi
}

set_shopt globstar
set_shopt extglob

IFS=$'\n\t'
files=()

# Evaluate all the globs and return the files that exist
for file in $(plugin_read_list FILES); do
  if [[ -e $file ]]; then
    files+=("$file")
  fi
done

if [[ -z ${files:-} ]]; then
  echo "No files found to shellcheck"
  exit 1
fi

# Read in the options to pass to shellcheck.  Ask for color by default
# for pretty online log display (but someone can override this with an
# explicit `options: "--color=never"`)
options=("--color=always")
while IFS=$'\n' read -r option; do
  options+=("$option")
done < <(plugin_read_list OPTIONS)

BUILDKITE_PLUGIN_SHELLCHECK_VERSION="${BUILDKITE_PLUGIN_SHELLCHECK_VERSION:-stable}"

echo "+++ Running shellcheck on ${#files[@]} files"
if docker run --rm -v "$PWD:/mnt" --workdir "/mnt" "koalaman/shellcheck:$BUILDKITE_PLUGIN_SHELLCHECK_VERSION" "${options[@]+${options[@]}}" "${files[@]}"; then
  echo "Files are ok âœ…"
else
  exit 1
fi
